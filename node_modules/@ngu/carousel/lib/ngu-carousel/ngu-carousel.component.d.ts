import { AfterContentInit, AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, IterableChanges, IterableDiffer, IterableDiffers, OnDestroy, OnInit, Renderer2, TrackByFunction } from '@angular/core';
import { Subscription } from 'rxjs';
import { NguCarouselOutlet } from './../ngu-carousel.directive';
import { NguCarouselStore } from './ngu-carousel';
import * as ɵngcc0 from '@angular/core';
export declare class NguCarousel<T> extends NguCarouselStore implements OnInit, AfterContentInit, AfterViewInit, OnDestroy, DoCheck {
    private _el;
    private _renderer;
    private _differs;
    private platformId;
    private cdr;
    _dataSubscription: Subscription;
    _dataSource: any;
    _dataDiffer: IterableDiffer<{}>;
    styleid: string;
    private directionSym;
    private carouselCssNode;
    private pointIndex;
    private withAnim;
    activePoint: number;
    isHovered: boolean;
    private inputs;
    private carouselLoad;
    private onMove;
    arrayChanges: IterableChanges<{}>;
    carouselInt: Subscription;
    listener1: () => void;
    listener2: () => void;
    listener3: () => void;
    listener4: () => void;
    get dataSource(): any;
    set dataSource(data: any);
    private _defaultNodeDef;
    private _defDirec;
    _nodeOutlet: NguCarouselOutlet;
    /** The setter is used to catch the button if the button has ngIf
     * issue id #91
     */
    set nextBtn(btn: ElementRef);
    /** The setter is used to catch the button if the button has ngIf
     * issue id #91
     */
    set prevBtn(btn: ElementRef);
    private carouselMain1;
    private nguItemsContainer;
    private touchContainer;
    private _intervalController$;
    private carousel;
    private onResize;
    private onScrolling;
    pointNumbers: Array<any>;
    /**
     * Tracking function that will be used to check the differences in data changes. Used similarly
     * to `ngFor` `trackBy` function. Optimize Items operations by identifying a Items based on its data
     * relative to the function to know if a Items should be added/removed/moved.
     * Accepts a function that takes two parameters, `index` and `item`.
     */
    get trackBy(): TrackByFunction<T>;
    set trackBy(fn: TrackByFunction<T>);
    private _trackByFn;
    constructor(_el: ElementRef, _renderer: Renderer2, _differs: IterableDiffers, platformId: object, cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngDoCheck(): void;
    private _switchDataSource;
    private _observeRenderChanges;
    private renderNodeChanges;
    /**
     * Updates the index-related context for each row to reflect any changes in the index of the rows,
     * e.g. first/last/even/odd.
     */
    private _updateItemIndexContext;
    private _getNodeDef;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    private _inputValidation;
    ngOnDestroy(): void;
    private _onResizing;
    /** Get Touch input */
    private _touch;
    /** handle touch input */
    private _touchHandling;
    private _setTouchTransfrom;
    private _setTransformFromTouch;
    /** this fn used to disable the interval when it is not on the viewport */
    private _onWindowScrolling;
    /** store data based on width of the screen for the carousel */
    private _storeCarouselData;
    /** Used to reset the carousel */
    reset(withOutAnimation?: boolean): void;
    /** Init carousel point */
    private _carouselPoint;
    /** change the active point in carousel */
    private _carouselPointActiver;
    /** this function is used to scoll the carousel when point is clicked */
    moveTo(slide: number, withOutAnimation?: boolean): void;
    /** set the style of the carousel based the inputs data */
    private _carouselSize;
    /** logic to scroll the carousel step 1 */
    private _carouselScrollOne;
    /** logic to scroll the carousel step 2 */
    private _carouselScrollTwo;
    /** boolean function for making isFirst and isLast */
    private _btnBoolean;
    private _transformString;
    /** set the transform style to scroll the carousel  */
    private _transformStyle;
    /** this will trigger the carousel to load the items */
    private _carouselLoadTrigger;
    /** generate Class for each carousel to set specific style */
    private _generateID;
    /** handle the auto slide */
    private _carouselInterval;
    private _updateItemIndexContextAni;
    /** animate the carousel items */
    private _carouselAnimator;
    private _removeAnimations;
    /** Short form for setElementStyle */
    private _setStyle;
    /** For generating style tag */
    private _createStyleElem;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NguCarousel<any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NguCarousel<any>, "ngu-carousel", never, { "dataSource": "dataSource"; "trackBy": "trackBy"; "inputs": "inputs"; }, { "carouselLoad": "carouselLoad"; "onMove": "onMove"; }, ["nextBtn", "prevBtn", "_defDirec"], ["[NguCarouselPrev]", "[NguCarouselNext]", "[NguCarouselPoint]"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd1LWNhcm91c2VsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJuZ3UtY2Fyb3VzZWwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIERvQ2hlY2ssIEVsZW1lbnRSZWYsIEl0ZXJhYmxlQ2hhbmdlcywgSXRlcmFibGVEaWZmZXIsIEl0ZXJhYmxlRGlmZmVycywgT25EZXN0cm95LCBPbkluaXQsIFJlbmRlcmVyMiwgVHJhY2tCeUZ1bmN0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBOZ3VDYXJvdXNlbE91dGxldCB9IGZyb20gJy4vLi4vbmd1LWNhcm91c2VsLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IE5ndUNhcm91c2VsU3RvcmUgfSBmcm9tICcuL25ndS1jYXJvdXNlbCc7XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5ndUNhcm91c2VsPFQ+IGV4dGVuZHMgTmd1Q2Fyb3VzZWxTdG9yZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBEb0NoZWNrIHtcclxuICAgIHByaXZhdGUgX2VsO1xyXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XHJcbiAgICBwcml2YXRlIF9kaWZmZXJzO1xyXG4gICAgcHJpdmF0ZSBwbGF0Zm9ybUlkO1xyXG4gICAgcHJpdmF0ZSBjZHI7XHJcbiAgICBfZGF0YVN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gICAgX2RhdGFTb3VyY2U6IGFueTtcclxuICAgIF9kYXRhRGlmZmVyOiBJdGVyYWJsZURpZmZlcjx7fT47XHJcbiAgICBzdHlsZWlkOiBzdHJpbmc7XHJcbiAgICBwcml2YXRlIGRpcmVjdGlvblN5bTtcclxuICAgIHByaXZhdGUgY2Fyb3VzZWxDc3NOb2RlO1xyXG4gICAgcHJpdmF0ZSBwb2ludEluZGV4O1xyXG4gICAgcHJpdmF0ZSB3aXRoQW5pbTtcclxuICAgIGFjdGl2ZVBvaW50OiBudW1iZXI7XHJcbiAgICBpc0hvdmVyZWQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIGlucHV0cztcclxuICAgIHByaXZhdGUgY2Fyb3VzZWxMb2FkO1xyXG4gICAgcHJpdmF0ZSBvbk1vdmU7XHJcbiAgICBhcnJheUNoYW5nZXM6IEl0ZXJhYmxlQ2hhbmdlczx7fT47XHJcbiAgICBjYXJvdXNlbEludDogU3Vic2NyaXB0aW9uO1xyXG4gICAgbGlzdGVuZXIxOiAoKSA9PiB2b2lkO1xyXG4gICAgbGlzdGVuZXIyOiAoKSA9PiB2b2lkO1xyXG4gICAgbGlzdGVuZXIzOiAoKSA9PiB2b2lkO1xyXG4gICAgbGlzdGVuZXI0OiAoKSA9PiB2b2lkO1xyXG4gICAgZ2V0IGRhdGFTb3VyY2UoKTogYW55O1xyXG4gICAgc2V0IGRhdGFTb3VyY2UoZGF0YTogYW55KTtcclxuICAgIHByaXZhdGUgX2RlZmF1bHROb2RlRGVmO1xyXG4gICAgcHJpdmF0ZSBfZGVmRGlyZWM7XHJcbiAgICBfbm9kZU91dGxldDogTmd1Q2Fyb3VzZWxPdXRsZXQ7XHJcbiAgICAvKiogVGhlIHNldHRlciBpcyB1c2VkIHRvIGNhdGNoIHRoZSBidXR0b24gaWYgdGhlIGJ1dHRvbiBoYXMgbmdJZlxyXG4gICAgICogaXNzdWUgaWQgIzkxXHJcbiAgICAgKi9cclxuICAgIHNldCBuZXh0QnRuKGJ0bjogRWxlbWVudFJlZik7XHJcbiAgICAvKiogVGhlIHNldHRlciBpcyB1c2VkIHRvIGNhdGNoIHRoZSBidXR0b24gaWYgdGhlIGJ1dHRvbiBoYXMgbmdJZlxyXG4gICAgICogaXNzdWUgaWQgIzkxXHJcbiAgICAgKi9cclxuICAgIHNldCBwcmV2QnRuKGJ0bjogRWxlbWVudFJlZik7XHJcbiAgICBwcml2YXRlIGNhcm91c2VsTWFpbjE7XHJcbiAgICBwcml2YXRlIG5ndUl0ZW1zQ29udGFpbmVyO1xyXG4gICAgcHJpdmF0ZSB0b3VjaENvbnRhaW5lcjtcclxuICAgIHByaXZhdGUgX2ludGVydmFsQ29udHJvbGxlciQ7XHJcbiAgICBwcml2YXRlIGNhcm91c2VsO1xyXG4gICAgcHJpdmF0ZSBvblJlc2l6ZTtcclxuICAgIHByaXZhdGUgb25TY3JvbGxpbmc7XHJcbiAgICBwb2ludE51bWJlcnM6IEFycmF5PGFueT47XHJcbiAgICAvKipcclxuICAgICAqIFRyYWNraW5nIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSB1c2VkIHRvIGNoZWNrIHRoZSBkaWZmZXJlbmNlcyBpbiBkYXRhIGNoYW5nZXMuIFVzZWQgc2ltaWxhcmx5XHJcbiAgICAgKiB0byBgbmdGb3JgIGB0cmFja0J5YCBmdW5jdGlvbi4gT3B0aW1pemUgSXRlbXMgb3BlcmF0aW9ucyBieSBpZGVudGlmeWluZyBhIEl0ZW1zIGJhc2VkIG9uIGl0cyBkYXRhXHJcbiAgICAgKiByZWxhdGl2ZSB0byB0aGUgZnVuY3Rpb24gdG8ga25vdyBpZiBhIEl0ZW1zIHNob3VsZCBiZSBhZGRlZC9yZW1vdmVkL21vdmVkLlxyXG4gICAgICogQWNjZXB0cyBhIGZ1bmN0aW9uIHRoYXQgdGFrZXMgdHdvIHBhcmFtZXRlcnMsIGBpbmRleGAgYW5kIGBpdGVtYC5cclxuICAgICAqL1xyXG4gICAgZ2V0IHRyYWNrQnkoKTogVHJhY2tCeUZ1bmN0aW9uPFQ+O1xyXG4gICAgc2V0IHRyYWNrQnkoZm46IFRyYWNrQnlGdW5jdGlvbjxUPik7XHJcbiAgICBwcml2YXRlIF90cmFja0J5Rm47XHJcbiAgICBjb25zdHJ1Y3RvcihfZWw6IEVsZW1lbnRSZWYsIF9yZW5kZXJlcjogUmVuZGVyZXIyLCBfZGlmZmVyczogSXRlcmFibGVEaWZmZXJzLCBwbGF0Zm9ybUlkOiBvYmplY3QsIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBfc3dpdGNoRGF0YVNvdXJjZTtcclxuICAgIHByaXZhdGUgX29ic2VydmVSZW5kZXJDaGFuZ2VzO1xyXG4gICAgcHJpdmF0ZSByZW5kZXJOb2RlQ2hhbmdlcztcclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlcyB0aGUgaW5kZXgtcmVsYXRlZCBjb250ZXh0IGZvciBlYWNoIHJvdyB0byByZWZsZWN0IGFueSBjaGFuZ2VzIGluIHRoZSBpbmRleCBvZiB0aGUgcm93cyxcclxuICAgICAqIGUuZy4gZmlyc3QvbGFzdC9ldmVuL29kZC5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBfdXBkYXRlSXRlbUluZGV4Q29udGV4dDtcclxuICAgIHByaXZhdGUgX2dldE5vZGVEZWY7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xyXG4gICAgcHJpdmF0ZSBfaW5wdXRWYWxpZGF0aW9uO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIHByaXZhdGUgX29uUmVzaXppbmc7XHJcbiAgICAvKiogR2V0IFRvdWNoIGlucHV0ICovXHJcbiAgICBwcml2YXRlIF90b3VjaDtcclxuICAgIC8qKiBoYW5kbGUgdG91Y2ggaW5wdXQgKi9cclxuICAgIHByaXZhdGUgX3RvdWNoSGFuZGxpbmc7XHJcbiAgICBwcml2YXRlIF9zZXRUb3VjaFRyYW5zZnJvbTtcclxuICAgIHByaXZhdGUgX3NldFRyYW5zZm9ybUZyb21Ub3VjaDtcclxuICAgIC8qKiB0aGlzIGZuIHVzZWQgdG8gZGlzYWJsZSB0aGUgaW50ZXJ2YWwgd2hlbiBpdCBpcyBub3Qgb24gdGhlIHZpZXdwb3J0ICovXHJcbiAgICBwcml2YXRlIF9vbldpbmRvd1Njcm9sbGluZztcclxuICAgIC8qKiBzdG9yZSBkYXRhIGJhc2VkIG9uIHdpZHRoIG9mIHRoZSBzY3JlZW4gZm9yIHRoZSBjYXJvdXNlbCAqL1xyXG4gICAgcHJpdmF0ZSBfc3RvcmVDYXJvdXNlbERhdGE7XHJcbiAgICAvKiogVXNlZCB0byByZXNldCB0aGUgY2Fyb3VzZWwgKi9cclxuICAgIHJlc2V0KHdpdGhPdXRBbmltYXRpb24/OiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKiBJbml0IGNhcm91c2VsIHBvaW50ICovXHJcbiAgICBwcml2YXRlIF9jYXJvdXNlbFBvaW50O1xyXG4gICAgLyoqIGNoYW5nZSB0aGUgYWN0aXZlIHBvaW50IGluIGNhcm91c2VsICovXHJcbiAgICBwcml2YXRlIF9jYXJvdXNlbFBvaW50QWN0aXZlcjtcclxuICAgIC8qKiB0aGlzIGZ1bmN0aW9uIGlzIHVzZWQgdG8gc2NvbGwgdGhlIGNhcm91c2VsIHdoZW4gcG9pbnQgaXMgY2xpY2tlZCAqL1xyXG4gICAgbW92ZVRvKHNsaWRlOiBudW1iZXIsIHdpdGhPdXRBbmltYXRpb24/OiBib29sZWFuKTogdm9pZDtcclxuICAgIC8qKiBzZXQgdGhlIHN0eWxlIG9mIHRoZSBjYXJvdXNlbCBiYXNlZCB0aGUgaW5wdXRzIGRhdGEgKi9cclxuICAgIHByaXZhdGUgX2Nhcm91c2VsU2l6ZTtcclxuICAgIC8qKiBsb2dpYyB0byBzY3JvbGwgdGhlIGNhcm91c2VsIHN0ZXAgMSAqL1xyXG4gICAgcHJpdmF0ZSBfY2Fyb3VzZWxTY3JvbGxPbmU7XHJcbiAgICAvKiogbG9naWMgdG8gc2Nyb2xsIHRoZSBjYXJvdXNlbCBzdGVwIDIgKi9cclxuICAgIHByaXZhdGUgX2Nhcm91c2VsU2Nyb2xsVHdvO1xyXG4gICAgLyoqIGJvb2xlYW4gZnVuY3Rpb24gZm9yIG1ha2luZyBpc0ZpcnN0IGFuZCBpc0xhc3QgKi9cclxuICAgIHByaXZhdGUgX2J0bkJvb2xlYW47XHJcbiAgICBwcml2YXRlIF90cmFuc2Zvcm1TdHJpbmc7XHJcbiAgICAvKiogc2V0IHRoZSB0cmFuc2Zvcm0gc3R5bGUgdG8gc2Nyb2xsIHRoZSBjYXJvdXNlbCAgKi9cclxuICAgIHByaXZhdGUgX3RyYW5zZm9ybVN0eWxlO1xyXG4gICAgLyoqIHRoaXMgd2lsbCB0cmlnZ2VyIHRoZSBjYXJvdXNlbCB0byBsb2FkIHRoZSBpdGVtcyAqL1xyXG4gICAgcHJpdmF0ZSBfY2Fyb3VzZWxMb2FkVHJpZ2dlcjtcclxuICAgIC8qKiBnZW5lcmF0ZSBDbGFzcyBmb3IgZWFjaCBjYXJvdXNlbCB0byBzZXQgc3BlY2lmaWMgc3R5bGUgKi9cclxuICAgIHByaXZhdGUgX2dlbmVyYXRlSUQ7XHJcbiAgICAvKiogaGFuZGxlIHRoZSBhdXRvIHNsaWRlICovXHJcbiAgICBwcml2YXRlIF9jYXJvdXNlbEludGVydmFsO1xyXG4gICAgcHJpdmF0ZSBfdXBkYXRlSXRlbUluZGV4Q29udGV4dEFuaTtcclxuICAgIC8qKiBhbmltYXRlIHRoZSBjYXJvdXNlbCBpdGVtcyAqL1xyXG4gICAgcHJpdmF0ZSBfY2Fyb3VzZWxBbmltYXRvcjtcclxuICAgIHByaXZhdGUgX3JlbW92ZUFuaW1hdGlvbnM7XHJcbiAgICAvKiogU2hvcnQgZm9ybSBmb3Igc2V0RWxlbWVudFN0eWxlICovXHJcbiAgICBwcml2YXRlIF9zZXRTdHlsZTtcclxuICAgIC8qKiBGb3IgZ2VuZXJhdGluZyBzdHlsZSB0YWcgKi9cclxuICAgIHByaXZhdGUgX2NyZWF0ZVN0eWxlRWxlbTtcclxufVxyXG4iXX0=